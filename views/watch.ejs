
<!-- EJS Version -->
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://unpkg.com/plyr@3/dist/plyr.css">
<title>CTK Anime Hub</title>
<meta name="title" content="CTK Anime Hub">
<meta name="description" content="It is the place where you can watch anime without any ads.">
<meta property="og:title" content="Watch ">
<meta property="og:description" content="It is the place where you can watch anime without any ads.">
<meta name="theme-color" content="#f39816">
<style>
  body {
    background-color: #111;
  }
  
  .plyr__video-wrapper {
    padding-top: 56.25%;
    position: relative;
  }
  .plyr__video-wrapper video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
    .container {
        padding-top: 18vh;
        margin: 15px auto;
        width: 800px;
    }
    video {
        width: 100%;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/hls.js"></script>
<script src="https://unpkg.com/plyr@3"></script>
<script src="./hls.js"></script>
</head>
<body>
<div class="container"> <video controls crossorigin playsinline >
        <source 
            type="application/x-mpegURL" 
            src="https://cors-ghoul.herokuapp.com/<%= videoUrl %>"
        >
    </video>

      <script src="https://cpwebassets.codepen.io/assets/common/stopExecutionOnTimeout-2c7831bb44f98c1391d6a4ffda0e1fd302503391ca806e7fcc7b9b87197aec26.js"></script>

  
      <script id="rendered-js" >
document.addEventListener("DOMContentLoaded", () => {
  const video = document.querySelector("video");
  const source = video.getElementsByTagName("source")[0].src;

  // For more options see: https://github.com/sampotts/plyr/#options
  // captions.update is required for captions to work with hls.js
  const defaultOptions = {};

  if (Hls.isSupported()) {
    // For more Hls.js options, see https://github.com/dailymotion/hls.js
    const hls = new Hls();
    hls.loadSource(source);

    // From the m3u8 playlist, hls parses the manifest and returns
    // all available video qualities. This is important, in this approach,
    // we will have one source on the Plyr player.
    hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {

      // Transform available levels into an array of integers (height values).
      const availableQualities = hls.levels.map(l => l.height);

      // Add new qualities to option
      defaultOptions.quality = {
        default: availableQualities[0],
        options: availableQualities,
        // this ensures Plyr to use Hls to update quality level
        forced: true,
        onChange: e => updateQuality(e) };


      // Initialize here
      const player = new Plyr(video, defaultOptions);
    });
    hls.attachMedia(video);
    window.hls = hls;
  } else {
    // default options with no quality update in case Hls is not supported
    const player = new Plyr(video, defaultOptions);
  }

  function updateQuality(newQuality) {
    window.hls.levels.forEach((level, levelIndex) => {
      if (level.height === newQuality) {
        console.log("Found quality match with " + newQuality);
        window.hls.currentLevel = levelIndex;
      }
    });
  }
});
//# sourceURL=pen.js
    </script>

</div>
</body>
</html>
